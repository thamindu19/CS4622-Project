# -*- coding: utf-8 -*-
"""190316H_Project-Layer11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jst1BaZJvx9scmXH5XlnFjPL-26Byav1

# ML4622 Machine Learning - Project

## Pre-processing Data
"""

import pandas as pd
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.experimental import enable_halving_search_cv
from sklearn.model_selection import HalvingGridSearchCV
from sklearn import metrics

data_train = pd.read_csv('data/train.csv')
data_valid = pd.read_csv('data/valid.csv')
data_test = pd.read_csv('data/test.csv')

"""### Inspecting Data"""

data_train.shape

data_valid.shape

data_test.shape

data_test.head()

"""### Handling Data"""

LABELS = [F'label_{i}' for i in range(1, 5)]
FEATURES = [F'feature_{i}' for i in range(1, 769)]

X_train, X_valid, X_test, y_train, y_valid, y_predict, y_test_1, y_test_2 = [{} for _ in range(8)]

for label in LABELS:
    if label == 'label_2':
        df_train = data_train[data_train['label_2'].notna()]
        df_valid = data_valid[data_valid['label_2'].notna()]
    else:
        df_train = data_train
        df_valid = data_valid
    df_test = data_test

    X_train[label] = df_train.drop(LABELS, axis=1)
    y_train[label] = df_train[label]
    X_valid[label] = df_valid.drop(LABELS, axis=1)
    y_valid[label] = df_valid[label]
    X_test[label] = df_test.iloc[:, 1:]

"""## Feature Engineering & Dimensionality Reduction

### Principal Component Analysis (PCA)
"""

def pca_reduce(X, pca, first_fit=False):
  if first_fit:
    X_train_pca = pca.fit_transform(X)
  else:
    X_train_pca = pca.transform(X)
  return pd.DataFrame(data=X_train_pca, columns=[X.columns[i] for i in range(X_train_pca.shape[1])])

"""## Hyper-parameter Tuning"""

C = [0.1, 1, 10, 100]
svc_model = SVC(kernel='rbf')
param_grid = {
    'C':C
}
grid = HalvingGridSearchCV(svc_model, param_grid, cv=5, verbose=1)

"""## Predicting labels"""

def svm(X, y):
  model = SVC(kernel='rbf', random_state=40, C=100)
  model.fit(X, y)
  return model

def predict(X, model):
  y_pred = model.predict(X)
  return pd.Series(y_pred)

def show_metrics(y_true, y_pred):
  print(metrics.confusion_matrix(y_true, y_pred))
  print(metrics.classification_report(y_true, y_pred))
  print(metrics.accuracy_score(y_true, y_pred))
  print(metrics.precision_score(y_true, y_pred, average='weighted'))
  print(metrics.recall_score(y_true, y_pred, average='weighted'))
  print(metrics.f1_score(y_true, y_pred, average='weighted'))

y_pred = {}

"""### Label 1 - Speaker"""

pca = PCA(n_components=0.97, svd_solver='full')
X_train_red = pca_reduce(X_train['label_1'], pca, first_fit=True)
X_train_red.shape
X_valid_red = pca_reduce(X_valid['label_1'], pca)
X_test_red = pca_reduce(X_test['label_1'], pca)
X_test_red.shape

grid.fit(X_train_red, y_train['label_1'])
print(grid.best_params_)

svm_model = svm(X_train_red, y_train['label_1'])
y1_pred_X_valid = predict(X_valid_red, svm_model)

show_metrics(y_valid['label_1'], y1_pred_X_valid)

y1_pred_X_test = predict(X_test_red, svm_model)
y_pred[0] = y1_pred_X_test

"""### Label 2 - Age"""

pca = PCA(n_components=0.98, svd_solver='full')
X_train_red = pca_reduce(X_train['label_2'], pca, first_fit=True)
X_train_red.shape
X_valid_red = pca_reduce(X_valid['label_2'], pca)
X_test_red = pca_reduce(X_test['label_2'], pca)
X_test_red.shape

grid.fit(X_train_red, y_train['label_2'])
print(grid.best_params_)

svm_model = svm(X_train_red, y_train['label_2'])
y2_pred_X_valid = predict(X_valid_red, svm_model)

show_metrics(y_valid['label_2'], y2_pred_X_valid)

y2_pred_X_test = predict(X_test_red, svm_model)
y_pred[1] = y2_pred_X_test.astype(int)

"""### Label 3 - Gender"""

pca = PCA(n_components=0.95, svd_solver='full')
X_train_red = pca_reduce(X_train['label_3'], pca, first_fit=True)
X_train_red.shape
X_valid_red = pca_reduce(X_valid['label_3'], pca)
X_test_red = pca_reduce(X_test['label_3'], pca)
X_test_red.shape

grid.fit(X_train_red, y_train['label_3'])
print(grid.best_params_)

svm_model = svm(X_train_red, y_train['label_3'])
y3_pred_X_valid = predict(X_valid_red, svm_model)

show_metrics(y_valid['label_3'], y3_pred_X_valid)

y3_pred_X_test = predict(X_test_red, svm_model)
y_pred[2] = y3_pred_X_test

"""### Label 4 - Accent"""

pca = PCA(n_components=0.97, svd_solver='full')
X_train_red = pca_reduce(X_train['label_4'], pca, first_fit=True)
X_train_red.shape
X_valid_red = pca_reduce(X_valid['label_4'], pca)
X_test_red = pca_reduce(X_test['label_4'], pca)
X_test_red.shape

grid.fit(X_train_red, y_train['label_4'])
print(grid.best_params_)

svm_model = svm(X_train_red, y_train['label_4'])
y4_pred_X_valid = predict(X_valid_red, svm_model)

show_metrics(y_valid['label_4'], y4_pred_X_valid)

y4_pred_X_test = predict(X_test_red, svm_model)
y_pred[3] = y4_pred_X_test

"""## Formatting Output"""

data = {
  'ID' : list(range(1, y_pred[0].shape[0] + 1)),
  'label_1': y_pred[0],
  'label_2': y_pred[1],
  'label_3': y_pred[2],
  'label_4': y_pred[3]
}
df = pd.DataFrame(data)

df.to_csv('output11.csv', index=False)